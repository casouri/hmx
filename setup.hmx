(setq fib 
      (lambda (a b n)
        (if (= n 0)
            (+ a b)
          (+ a (fib b (+ a b) (- n 1))))))

(setq assq
      (lambda (key lst)
        (if (= lst ())
            ()
          (if (= key (car (car lst)))
              (car lst)
            (assq key (cdr lst))))))

(setq caar (lambda (x) (car (car x))))
(setq cadr (lambda (x) (car (cdr x))))
(setq cddr (lambda (x) (cdr (cdr x))))

(setq max (lambda (a b) (if (> a b) a b)))
(setq min (lambda (a b) (if (> a b) b a)))

(setq remove
      (lambda (elm lst)
        (if (= lst ())
            lst
          (let ((head (car lst))
                (tail (cdr lst)))
            (if (= elm head)
                (remove elm tail)
              (append (list head) (remove elm tail)))))))

(setq assq-set
      (lambda (key lst new-val)
        (let ((old-val (assq key lst)))
          (if (= old-val ())
              (append (list (list key new-val)) lst)
            (append (list (list key new-val)) (remove old-val lst))))))

(setq buffer-list '(("main" ("" 0))
                    ("mini" ("" 0))))

(setq current-buffer-name "main")

(setq switch-to-buffer
      (lambda (buf)
        (setq current-buffer-name buf)))

(setq current-buffer
      (lambda ()
        (cadr (assq current-buffer-name buffer-list))))

(setq point
      (lambda ()
        (cadr (current-buffer))))

(setq buffer-string
      (lambda ()
        (car (current-buffer))))

(setq insert
      (lambda (str)
        (let ((body (buffer-string))
              (p (point)))
          (let ((new-body (append (take p body)
                                  (append str (drop p body))))
                (new-p (+ p (length str))))
            (setq buffer-list
                  (assq-set current-buffer-name buffer-list
                            (list new-body new-p)))))))

(setq delete
      (lambda (len)
        (let ((body (buffer-string))
              (p (point)))
          (let ((new-body (append (take (- p len) body)
                                  (drop p body)))
                (new-p (max 0 (- p len))))
            (setq buffer-list
                  (assq-set current-buffer-name buffer-list
                            (list new-body new-p)))))))

(setq goto-char
      (lambda (p)
        (setq buffer-list
              (assq-set current-buffer-name buffer-list
                        (list (buffer-string) p)))))

(setq erase-buffer
      (lambda ()
        (setq buffer-list
              (assq-set current-buffer-name buffer-list
                        (list "" (point))))))

(setq functionp
      (lambda (obj)
        (or (symbolp obj)
            (if (listp obj)
                (= (car obj) 'lambda)
              false))))

(setq minibuffer-active-p 'false)

(setq run-command
      (lambda (key)
        (setq __stackframe ())
        (let ((val (cadr (assq key current-map))))
          (if (functionp val)
              (progn (setq current-map global-map)
                     (funcall val))
            (if (not (= val ()))
                (setq current-map val)
              (insert key))))))

(setq message
      (lambda (str)
        (let ((old-buf current-buffer-nam))
          (switch-to-buffer "mini")
          (erase-buffer)
          (insert str)
          (switch-to-buffer old-buf))))

(setq minibuffer-content
      (lambda ()
        (car (cadr (assq "mini" buffer-list)))))

(setq point-min (lambda () 0))
(setq point-max (lambda () (length (buffer-string))))

(setq nth
      (lambda (idx obj)
        (car (take 1 (drop idx obj)))))

(setq char-before
      (lambda ()
        (if (= (point) (point-min))
            ()
          (nth (- (point) 1) (buffer-string)))))

(setq char-after
      (lambda ()
        (if (= (point) (point-max))
            ()
          (nth (point) (buffer-string)))))

(setq forward-char
      (lambda (n)
        (goto-char (min (point-max) (+ (point) n)))))

(setq backward-char
      (lambda (n)
        (goto-char (max 0 (- (point) n)))))

(setq search-forward
      (lambda (char)
        (if (= char (char-after))
            true
          (if (= (point) (point-max))
              false
            (progn (forward-char 1)
                   (search-forward char))))))

(setq search-backward
      (lambda (char)
        (if (= char (char-before))
            true
          (if (= (point) (point-min))
              false
            (progn (backward-char 1)
                   (search-backward char))))))

(setq save-excursion
      (lambda (fn)
        (let ((p (point)))
          (let ((ret (funcall fn)))
            (goto-char p)
            ret))))

(setq current-column
      (lambda ()
        (save-excursion
          (lambda ()
            (let ((start (point)))
              (search-backward "\n")
              (- start (point)))))))

(setq end-of-line
      (lambda ()
        (save-excursion
          (lambda ()
            (if (= (char-after) "\n")
                (point)
              (progn (search-forward "\n")
                     (point)))))))

(setq beginning-of-line
      (lambda ()
        (save-excursion
          (lambda ()
            (if (= (char-before) "\n")
                (point)
              (progn (search-backward "\n")
                     (point)))))))

(setq line-beginning
      (lambda ()
        (search-backward "\n")))

(setq line-end
      (lambda ()
        (search-forward "\n")))

(setq forward-line
      (lambda ()
        (let ((col (current-column)))
          (search-forward "\n")
          (forward-char 1)
          (forward-char (min (- (end-of-line) (point)) col)))))

(setq backward-line
      (lambda ()
        (let ((col (current-column)))
          (search-backward "\n")
          (backward-char 1)
          (search-backward "\n")
          (forward-char (min (- (end-of-line) (point)) col)))))

(setq global-map
      '(("C-f" (lambda () (forward-char 1)))
        ("C-b" (lambda () (backward-char 1)))
        ("DEL" (lambda () (delete 1)))
        ("RET" (lambda () (insert "\n")))
        ("C-n" forward-line)
        ("C-p" backward-line)
        ("C-x" (("C-c" (lambda () 'halt))
                ("C-s" (lambda ()
                         (setq write-content (buffer-string))))))
        ("C-a" line-beginning)
        ("C-e" line-end)))

(setq current-map global-map)
(insert write-content)
